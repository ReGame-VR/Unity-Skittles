function TimingWindowError(dirName, id, hand, session, computed)

% path to open releaseData files
addpath(fullfile('C:\', 'Users', 'regamevrlab', 'Documents', 'MATLAB', 'Skittle', 'Codes to use', 'Analysis', '2D', 'Session Releases', dirName));

if session == 1 || session == 2
    ytarget = .43;
    
    if hand == 'R'
        xtarget = .38;
    else
        xtarget = - .38;
    end
    
else % transfer task
    ytarget = .5;
    
    if hand == 'R'
        xtarget = .2;
    else
        xtarget = - .2;
    end
end

binFile = newParticipant(id, session); % concatenate bin files

% retrieve concatenated release data generated by TNC analysis 
if session == 1
    releaseFile = sprintf('%s_session1.mat', id);
elseif session == 2
    releaseFile = sprintf('%s_session2_retention.mat', id);
elseif session == 3
    releaseFile = sprintf('%s_session2_transfer.mat', id);
end

load(fullfile('Session Bin Files', binFile), 'angle', 'velocity', 'time', 'sensor');
load(releaseFile, 'releaseData');

for counter = 1:3 %1 = abs value of velocity, 2 = positive velocities, 3 = negative velocities
    
    AVD = []; %reset AVD between iterations of for loop
    
    %%% set indices
    AVD(:,1) = releaseData(:,1); % indices
    AVD(:,3) = releaseData(:,2); % angles
    
    %%% set velocity and angle values
    if counter == 1 % absolute value velocities (all throws)
        AVD(:,2) = abs(releaseData(:,3)); %velocity
        figure_file_suffix = 'abs';
        
    elseif counter == 2 % positive velocities only
        AVD(:,2) = releaseData(:,3); %velocity
        
        pos_indices = find(AVD(:,2)>=0);
        if isempty(pos_indices) == 1
            continue
        end
        
        AVD = AVD(pos_indices,:);
        
        figure_file_suffix = 'pos';
        
    else % negative velocities only
        AVD(:,2) = releaseData(:,3); %velocity
        
        neg_indices = find(AVD(:,2)<0);
        if isempty(neg_indices) == 1
            continue
        end
        
        AVD = AVD(neg_indices,:);
        
        figure_file_suffix = 'neg';
        
    end
    
    ReleaseIndex=AVD(:,1);
    interval=200;
    Ideal=NaN(length(ReleaseIndex),2);
    HaveGap=zeros(length(ReleaseIndex),1);
    for trial=1:length(ReleaseIndex)
        if ReleaseIndex(trial)-interval<=0
            A=angle(1:ReleaseIndex(trial)+interval);
            V=velocity(1:ReleaseIndex(trial)+interval);
            NewRI(trial)=ReleaseIndex(trial);
        elseif ReleaseIndex(trial)+interval>=length(angle)
            %A=angle(ReleaseIndex(trial)-interval:end);
            V=velocity(ReleaseIndex(trial)-interval:end);
            NewRI(trial)=interval+1;
        else
            A=angle(ReleaseIndex(trial)-interval:ReleaseIndex(trial)+interval);
            V=velocity(ReleaseIndex(trial)-interval:ReleaseIndex(trial)+interval);
            NewRI(trial)=interval+1;
        end
        NewRI(trial) = ReleaseIndex(trial);
        
        A(A>=180)=A(A>=180)-360;
        V(V>=0)=NaN;A(isnan(V))=NaN;
        for point=1:length(A)
            if ~isnan(A(point))
                [E(point),~,hP(point)] = SMP(A(point),V(point),xtarget,ytarget);
            else
                E(point)=NaN;
            end
        end
        
        stop=length(V);
        Inthre=find(E(1:stop)<=0.011);
        gaps=find((Inthre(2:end)-Inthre(1:end-1))>20);Gap=max(gaps);clear gaps;
        
        if ~isempty(Gap)
            cluster{1}=Inthre(1:Gap);
            cluster{2}=Inthre(Gap+1:end);
            HaveGap(trial)=1;
            [~,Cluster]=min([min(abs(cluster{1}-NewRI(trial))),min(abs(cluster{2}-NewRI(trial)))]);
        end
        
        if HaveGap(trial)==0
            TimingWindow(trial)=length(find(E(1:stop)<=0.011));
            TWprint{trial}=[(A(E(1:stop)<=0.011))',(V(E(1:stop)<=0.011))'];
        else
            TimingWindow(trial)=length(cluster{Cluster});
            TWprint{trial}=[(A(cluster{Cluster}))',(V(cluster{Cluster}))'];
        end
        
        
        if min(E)==1||isempty(find(~isnan(E), 1))
            TimingError(trial)=NaN;
            Ideal(trial,:)=[NaN,NaN];
        elseif HaveGap(trial)==0
            if TimingWindow(trial)>1
                twindex=find(E(1:stop)<=0.011);
                TimingError(trial)=floor(mean(twindex))-NewRI(trial);
                Ideal(trial,:)=[A(floor(mean(twindex))),V(floor(mean(twindex)))];
            else
                TimingError(trial)=find(E==min(E(1:stop)),1)-NewRI(trial);
                Ideal(trial,:)=[A(find(E==min(E(1:stop)),1)),V(find(E==min(E(1:stop)),1))];
            end
        else
            INDEX=floor(mean(cluster{Cluster}));
            TimingError(trial)=INDEX-NewRI(trial);
            Ideal(trial,:)=[A(INDEX),V(INDEX)];
        end
        
    end
    
    %%% load SolMan figure that fits data
    %%% computed = 1 to load previously made manifold
    %%% computed = 0 to generate from scratch
    generateSolM([xtarget, ytarget], session, hand, counter, computed);
    hold on;
    plot(angle(end-50000+1:end), velocity(end-50000+1:end), 'm'); % plotting continuous angles vs continuous velocities - purple/pink lines
    plot(AVD(:,3), AVD(:,2), 'ok', 'markerfacecolor', 'w'); % plotting release angle vs release velocity - white circles
    
    %%% save figures with plotted points
    if session == 1
        saveas(figure(counter),[pwd sprintf('/Timing Figures/%s figs/%s_session1_%s.fig', dirName, id, figure_file_suffix)]);
    elseif session == 2
        saveas(figure(counter),[pwd sprintf('/Timing Figures/%s figs/%s_session2_retention_%s.fig', dirName, id, figure_file_suffix)]);
    elseif session == 3
        saveas(figure(counter),[pwd sprintf('/Timing Figures/%s figs/%s_session2_transfer_%s.fig', dirName, id, figure_file_suffix)]);
    end
end

close all;

end

function binFile = newParticipant(id, session)
%%% to read in and concatenate new participant bin files

%%% file path on grey laptop
addpath(fullfile('C:\', 'Users', 'regamevrlab', 'Documents', 'MATLAB', 'Skittle', 'Codes to use', 'Bin transforms')); % path to transformed bin files (bin --> mat)
dataFolder = fullfile('C:\', 'Users', 'regamevrlab', 'Documents', 'MATLAB', 'Skittle', 'Codes to use', 'Bin transforms'); % navigate to data file

d = [];

if session == 1
    d = dir(fullfile(dataFolder, sprintf('%s_1*.mat', id)));
    
elseif session == 2
    d = dir(fullfile(dataFolder, sprintf('%s_2_*.mat', id)));
    transfersToRemove = [];
    
    for i = 1:length(d)
        transfersToRemove = [transfersToRemove; contains(d(i).name, '_transfer')];
    end
    
    removeIndices = find(transfersToRemove);
    d(removeIndices) = [];
    
elseif session == 3
    d = dir(fullfile(dataFolder, sprintf('%s_2_*_transfer.mat', id)));
end

if isempty(d)
    error('There are no bin files associated with this participant session. Please try another session.'); 
else
    filesToConcatenate = [];
    for i=1:length(d)
        filesToConcatenate = [filesToConcatenate; load(d(i).name)];
    end
    
    %horizontal concatenation for continuous row of data
    angle = horzcat(filesToConcatenate.angle);
    sensor = horzcat(filesToConcatenate.sensor);
    time = horzcat(filesToConcatenate.time);
    velocity = horzcat(filesToConcatenate.velocity);
    
    if session == 1
        binFile = sprintf('%s_session1_bin.mat', id);
    elseif session == 2
        binFile = sprintf('%s_session2_retention_bin.mat', id);
    elseif session == 3
        binFile = sprintf('%s_session2_transfer_bin.mat', id);
    end
    
    %%% save concatenated version of data to analyze!
    save(fullfile('Session Bin Files', binFile), 'angle', 'sensor', 'time', 'velocity');
end
end



